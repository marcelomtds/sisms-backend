{"version":3,"sources":["./src/app/components/home/home.component.html","./src/app/components/home/home-routing.module.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.module.ts","./src/app/components/home/home.resolver.ts"],"names":[],"mappings":"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","file":"components-home-home-module.js","sourcesContent":["export default \"<section class=\\\"content-header\\\">\\r\\n  <h1>Página Principal</h1>\\r\\n</section>\\r\\n<section class=\\\"content\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-xs-12 col-sm-12 col-md-12 col-lg-12\\\">\\r\\n      <div *ngIf=\\\"dadosAgenda.length\\\" class=\\\"col-md-12\\\" style=\\\"padding: 0px\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <div class=\\\"box-header with-border\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-xs-12 col-sm-8 col-md-8 col-lg-8\\\">\\r\\n                <h3 class=\\\"box-title\\\">{{ getWeekDay }}</h3>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"box-body\\\">\\r\\n            <div class=\\\"table-roll\\\">\\r\\n              <table id=\\\"example2\\\" class=\\\"table table-bordered table-hover\\\">\\r\\n                <thead>\\r\\n                  <tr>\\r\\n                    <th>Status</th>\\r\\n                    <th>Horário Inicial</th>\\r\\n                    <th>Horário Final</th>\\r\\n                    <th>Paciente</th>\\r\\n                    <th>Tipo de Atendimento</th>\\r\\n                    <th>Categoria de Atendimento</th>\\r\\n                  </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                  <tr [ngStyle]=\\\"{'color': getColor(row.horarioInicio, row.horarioFim) }\\\" style=\\\"font-weight: bold;\\\"\\r\\n                    *ngFor=\\\"let row of dadosAgenda\\\">\\r\\n                    <td>\\r\\n                      {{ getStatus(row.horarioInicio, row.horarioFim) }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      {{ row.horarioInicio | horario }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      {{ row.horarioFim | horario }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      {{ row.pacienteNomeCompleto }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      {{ row.tipoAtendimentoDescricao }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      {{ row.categoriaAtendimentoDescricao }}\\r\\n                    </td>\\r\\n                  </tr>\\r\\n                </tbody>\\r\\n              </table>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <app-no-records [title]=\\\"getWeekDay\\\" *ngIf=\\\"!dadosAgenda?.length\\\"></app-no-records>\\r\\n    </div>\\r\\n    <div class=\\\"col-xs-12 col-sm-6 col-md-6 col-lg-6\\\">\\r\\n      <div class=\\\"box box-primary\\\">\\r\\n        <div class=\\\"box-header with-border\\\">\\r\\n          <h3 class=\\\"box-title\\\">Aniversariantes do Mês de {{ mes }} - Pacientes</h3>\\r\\n        </div>\\r\\n        <div class=\\\"box-body\\\">\\r\\n          <div *ngFor=\\\"let paciente of pacientes\\\" class=\\\"callout callout-success\\\">\\r\\n            <h4>{{ paciente.nomeCompleto }} - {{ paciente.dataNascimento | idade }}</h4>\\r\\n            <strong>{{ paciente.dataNascimento | date : 'dd/MM/yyyy' }}</strong>\\r\\n          </div>\\r\\n          <p *ngIf=\\\"!pacientes.length\\\">Nenhum registro encontrado.</p>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-xs-12 col-sm-6 col-md-6 col-lg-6\\\">\\r\\n      <div class=\\\"box box-primary\\\">\\r\\n        <div class=\\\"box-header with-border\\\">\\r\\n          <h3 class=\\\"box-title\\\">Aniversariantes do Mês de {{ mes }} - Usuários</h3>\\r\\n        </div>\\r\\n        <div class=\\\"box-body\\\">\\r\\n          <div *ngFor=\\\"let usuario of usuarios\\\" class=\\\"callout callout-success\\\">\\r\\n            <h4>{{ usuario.nomeCompleto }} - {{ usuario.dataNascimento | idade }}</h4>\\r\\n            <strong>{{ usuario.dataNascimento | date : 'dd/MM/yyyy' }}</strong>\\r\\n          </div>\\r\\n          <p *ngIf=\\\"!usuarios.length\\\">Nenhum registro encontrado.</p>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home.component';\r\nimport { HomeResolver } from './home.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n    resolve: {\r\n      resolve: HomeResolver\r\n    },\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  providers: [\r\n    HomeResolver\r\n  ]\r\n})\r\nexport class HomeRoutingModule { }\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Agenda } from '../../core/model/model/agenda.model';\r\nimport { Paciente } from '../../core/model/model/paciente.model';\r\nimport { Usuario } from '../../core/model/model/usuario.model';\r\nimport Util from '../../shared/util/util';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n\r\n  pacientes = new Array<Paciente>();\r\n  usuarios = new Array<Usuario>();\r\n  dadosAgenda = new Array<Agenda>();\r\n  mes: string;\r\n  interval;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.interval = setInterval(() => {\r\n    }, 1000);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getMes();\r\n    this.onLoadData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.interval = null;\r\n  }\r\n\r\n  getColor(horarioInicial: string, horarioFinal: string): any {\r\n    if (this.isAfter(horarioInicial, horarioFinal)) {\r\n      return 'blue';\r\n    } else if (this.isBetween(horarioInicial, horarioFinal)) {\r\n      return 'green';\r\n    } else {\r\n      return '#ff8115';\r\n    }\r\n  }\r\n\r\n  getStatus(horarioInicial: string, horarioFinal: string): any {\r\n    if (this.isAfter(horarioInicial, horarioFinal)) {\r\n      return 'Encerrado';\r\n    } else if (this.isBetween(horarioInicial, horarioFinal)) {\r\n      return 'Em Atedimento';\r\n    } else {\r\n      return 'Não Iniciado';\r\n    }\r\n  }\r\n\r\n  get getWeekDay(): string {\r\n    return `Agenda para ${Util.diaSemana(new Date().getDay())}`;\r\n  }\r\n\r\n  private onLoadData(): void {\r\n    this.route.data.subscribe(response => {\r\n      this.pacientes = response.resolve[0].result;\r\n      this.usuarios = response.resolve[1].result;\r\n      this.dadosAgenda = response.resolve[2].result;\r\n    });\r\n  }\r\n\r\n  private isBetween(horarioInicial: string, horarioFinal: string): boolean {\r\n    return moment().isBetween(`${moment(new Date()).format('YYYY-MM-DD')}T${horarioInicial}`,\r\n      `${moment(new Date()).format('YYYY-MM-DD')}T${horarioFinal}`);\r\n  }\r\n\r\n  private isAfter(horarioInicial: string, horarioFinal: string): boolean {\r\n    return moment().isAfter(`${moment(new Date()).format('YYYY-MM-DD')}T${horarioInicial}`)\r\n      && moment().isAfter(`${moment(new Date()).format('YYYY-MM-DD')}T${horarioFinal}`);\r\n  }\r\n\r\n  private getMes(): void {\r\n    this.mes = Util.mesesAno(new Date().getMonth() + 1);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { SismsCommonsModule } from '../sisms-commons.module';\r\nimport { HomeRoutingModule } from './home-routing.module';\r\nimport { HomeComponent } from './home.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    HomeComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HomeRoutingModule,\r\n    SharedModule,\r\n    SismsCommonsModule\r\n  ]\r\n})\r\nexport class HomeModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport { AgendaService } from 'src/app/core/services/agenda.service';\r\nimport { PacienteService } from 'src/app/core/services/paciente.service';\r\nimport { UsuarioService } from 'src/app/core/services/usuario.service';\r\n\r\n@Injectable()\r\nexport class HomeResolver implements Resolve<Observable<any>> {\r\n\r\n    constructor(\r\n        private pacienteService: PacienteService,\r\n        private agendaService: AgendaService,\r\n        private usuarioService: UsuarioService\r\n    ) { }\r\n\r\n    resolve(): Observable<any> {\r\n        return forkJoin([\r\n            this.pacienteService.findAllBirthdaysMonth(),\r\n            this.usuarioService.findAllBirthdaysMonth(),\r\n            this.agendaService.findAll()\r\n        ]);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}